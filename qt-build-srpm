#!/bin/bash
# Copyright (C) 2009-2013 Eric Shubert <eric@datamatters.us>
#
# Build QMailToaster srpm file
######################################################################
# Change Log
# 11/25/13 shubes - created
######################################################################

# change these 2 variables appropriately. Nothing else should be changed.
mygithub=~/github
mygpgpass="use your gpg key pass"

######################################################################
# setup temp directory and file
#
a1_setup_temp_stuff(){

# set a temp dir for the working scratch. $$ is the current shell ID.
tempdir=$(tempfile 2>/dev/null)  || tempdir=/tmp/$me.$$
tempfile=$(tempfile 2>/dev/null) || tempfile=/tmp/$me.$myver.$$

# make sure the tempdir is deleted when we're done
trap "rm -rf $tempdir $tempfile" 0 1 2 5 15
}

######################################################################
# clone the git repo to a temporary directory
#
a2_clone_git_to_temp(){

mkdir $tempdir
# git 1.8.5 will have a -C option. 'til then, we need to cd to the target
savepwd=$PWD
cd $tempdir
git clone $github/$pkg
cd $savepwd

if [ -f $tempdir/$pkg/$pkg.spec ]; then
  gspecdir=$tempdir/$pkg
else
  cd $tempdir
  rm -rf $tempdir/$pkg
  git clone $github/pkgs/$pkg
  cd $savepwd
  if [ -f $tempdir/pkgs/$pkg/$pkg.spec ]; then
    gspecdir=$tempdir/pkgs/$pkg
  else
    echo "$me - unable to clone git repo - terminating"
    exit 1
  fi
fi
}

######################################################################
# get variables from the spec file
#
a3_determine_current_version_release(){

specfile=$gspecdir/$pkg.spec

read vertag version anythingleft <<!EOF!
$(grep --max-count=1 "^Version:" $specfile)
!EOF!

read reltag relstring anythingleft <<!EOF!
$(grep --max-count=1 "^Release:" $specfile)
!EOF!
release=${relstring%\%\{?dist\}}$repotag
}

######################################################################
# wget sources not in the git spec repo from their internet locations
#
a4_get_external_sources(){

while read srctag srcval anythingleft; do
# this loop is done at least once even with no input, for some reason
  if [ -z "$srcval" ]; then
    break
  fi
  srcurl=$(echo $srcval | sed -e "s|%{name}|$pkg|" -e "s|%{version}|$version|")
  srcname=${srcurl##*/}
  srcloc=${srcurl%/${srcname}}
  srcloc=${srcloc#*//}
  srcfile=$sourcedir/$srcname
  if [ ! -f "$srcfile" ] && [ ! -f $gspecdir/$srcname ]; then
    wget $srcurl -O "$srcfile"
  fi
done <<!EOF!
$(grep "^Source[0-9]*:" $specfile)
!EOF!
}

######################################################################
# Copy files in local git directory to SOURCES
#
a6_copy_local_git_files(){

for srcname in $(ls $gspecdir); do
  case "$srcname" in
    "$pkg.spec" | "README.md" )
      :
      ;;
    * )
      srcfile=$sourcedir/$srcname
      rm -f $srcfile
      cp -p $gspecdir/$srcname $srcfile
  esac
done
}

######################################################################
# invoke expect script to sign build and sign script with no pw prompt
#
a8_build_signed_rpm(){

cat <<!EOF! >>$tempfile
set repo "dist $repotag"
set specfile "$specfile"
spawn rpmbuild -bs --define "\$repo" --sign \$specfile
expect "phrase:"
send "$mygpgpass\r"
interact
!EOF!

expect -f $tempfile
}

######################################################################
# main routine begins here
#
me=${0##*/}
myver=v1.0

# find the package .spec file
if [ -z "$1" ]; then
  herespec=$(ls *.spec 2>&1)
  if [ "$(echo $herespec | wc -w)" == "1" ]; then
    pkg=${herespec%.spec}
  else
    echo "$me what? (no .spec file here)"
    exit 1
  fi
elif [ -f "$mygithub/$1/$1.spec" ]; then
  pkg=$1
elif [ -f "$mygithub/pkgs/$1/$1.spec" ]; then
  pkg=$1
else
  echo "$me - $pkg not found"
  exit 1
fi

repotag=.qt
github=https://github.com/QMailToaster
sourcedir=$(rpm --eval='%{_sourcedir}')
srcrpmdir=$(rpm --eval='%{_srcrpmdir}')

a1_setup_temp_stuff

a2_clone_git_to_temp

a3_determine_current_version_release

echo "$me - $pkg version-release is $version-$release"

srcrpm="$srcrpmdir/$pkg-$version-$release.src.rpm"
if [ -f "$srcrpm" ]; then
  rpm -ivh "$srcrpm"
fi

a4_get_external_sources

a6_copy_local_git_files

a8_build_signed_rpm

#!/bin/bash
# Copyright (C) 2009-2013 Eric Shubert <eric@datamatters.us>
#
# Build QMailToaster srpm file
######################################################################
# Change Log
# 11/29/13 shubes - modified to copy resulting src.rpm to repo staging
# 11/28/13 shubes - modified to use gspecdir as rpmbuild/SOURCES
#                 - added spectool for obtaining external sources
#                 - refactored a bit
# 11/25/13 shubes - created
######################################################################

# change my* variables appropriately. Nothing else should be changed.
mygithub=~/github
mygpgpass="use your gpg key pass"
myrepouser=shubes-stage

######################################################################
# set tempgit and tempfile names.
# tempgit is for the git clone, and tempfile is for executing expect
#
a1_setup_temp_stuff(){

tempfile=$(tempfile 2>/dev/null) || tempfile=/tmp/$me.$myver.$$
tempgit=$(tempfile 2>/dev/null)  || tempgit=/tmp/$me.$$

# make sure the temp stuff is deleted when we're done
trap "rm -rf $tempgit $tempfile" 0 1 2 5 15
}

######################################################################
# clone the git repo to a temporary directory,
#
a2_clone_git_to_temp(){

mkdir $tempgit
# git 1.8.5 will have a -C option. 'til then, we need to cd to the target
savepwd=$PWD
cd $tempgit
git clone https://github.com/QMailToaster/$pkg
cd $savepwd

gspecdir=$tempgit/$pkg
specfile=$gspecdir/$pkg.spec

if [ ! -f "$specfile" ]; then
  echo "$me - unable to clone git repo - terminating"
  exit 1
fi
}

######################################################################
# use an existing src rpm file if one exists
#
a4_use_existing_src_rpm(){

read vertag version anythingleft <<!EOF!
$(grep --max-count=1 "^Version:" $specfile)
!EOF!

read reltag relstring anythingleft <<!EOF!
$(grep --max-count=1 "^Release:" $specfile)
!EOF!
release=$(echo $relstring | sed -e "s|%{?dist}|$repotag|")

srcrpmname=$pkg-$version-$release.src.rpm
srcrpm=$(rpm --eval='%{_srcrpmdir}')/$srcrpmname
if [ -f "$srcrpm" ]; then
  rpm -ivh --define "_sourcedir $gspecdir" $srcrpm
fi
}

######################################################################
# get sources from their internet locations
# we bypass getting files we already have from the src rpm file
#
a6_get_external_sources(){

while read srctag srcval anythingleft; do
# this loop is done at least once even with no input
# it appears that read does not treat a single \n as EOF
  if [ -z "$srcval" ]; then
    break
  fi
  if [ ! -f "$gspecdir/${srcval##*/}" ]; then
    srcstring=${srctag%:}
    srcnum=${srcstring#Source}
    echo "$me getting source $srcnum"
    spectool --get-files -C $gspecdir --source $srcnum $specfile
  fi
done <<!EOF!
$(spectool --list-files $specfile)
!EOF!
}

######################################################################
# build and invoke expect script to build and sign src.rpm with no prompt
#
a8_build_signed_rpm(){

cat <<!EOF! >>$tempfile
set repo "dist $repotag"
set source "_sourcedir $gspecdir"
set specfile "$specfile"
spawn rpmbuild -bs --define "\$repo" --define "\$source" --sign \$specfile
expect "phrase:"
send "$mygpgpass\r"
interact
!EOF!

expect -f $tempfile
}

######################################################################
# main routine begins here
#
me=${0##*/}
myver=v1.1

# find the package .spec file
if [ -z "$1" ]; then
  herespec=$(ls *.spec 2>&1)
  if [ "$(echo $herespec | wc -w)" == "1" ]; then
    pkg=${herespec%.spec}
  else
    echo "$me what? (no .spec file here)"
    exit 1
  fi
elif [ -f "$mygithub/$1/$1.spec" ]; then
  pkg=$1
else
  echo "$me - $pkg not found"
  exit 1
fi

repotag=.qt
repohost=masterepo.qmailtoaster.com
repostage=/stage/testing/SRPMS/.

a1_setup_temp_stuff

a2_clone_git_to_temp

a4_use_existing_src_rpm

a6_get_external_sources

a8_build_signed_rpm

if [ -f "$srcrpm" ]; then
  scp -p -P 17132 $srcrpm $myrepouser@$repohost:$repostage 2>/dev/null
  exit 0
else
  echo "$me - $srcrpm not found, not copied to repo staging"
  exit 1
fi
